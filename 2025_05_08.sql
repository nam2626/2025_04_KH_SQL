-- 사용자 생성
--          C##사용자명             암호
CREATE USER C##SCOTT IDENTIFIED BY 123456;
-- 권한 부여
GRANT RESOURCE, CONNECT TO C##SCOTT;
-- 저장소 사용량 부여
ALTER USER C##SCOTT DEFAULT TABLESPACE 
USERS QUOTA UNLIMITED ON USERS;

-- 학생 테이블
-- 학번, 이름, 학과명, 평점
CREATE TABLE STUDENT(
    SNO CHAR(8),
    SNAME VARCHAR2(50),
    MNAME VARCHAR2(50),
    SCORE NUMBER(3,2)
);
-- 데이터 추가 - INSERT
INSERT INTO 
STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20203333','김철수','컴퓨터공학과',3.24);
INSERT INTO 
STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20204444','박철수','컴퓨터공학과',3.24);
INSERT INTO 
STUDENT(SNAME,MNAME) 
VALUES('박철수','컴퓨터공학과');
INSERT INTO 
STUDENT
VALUES('20206666','이철수','컴퓨터공학과',3.24);
-- 전체 데이터 조회
SELECT * FROM STUDENT;

-- 수정한 데이터를 적용하는 명령어
COMMIT;

-- 마지막 COMMIT 상태로 되돌리는 명령어
ROLLBACK;

-- DDL : Data Definition Language, 데이터 정의어
-- 	데이터베이스 구성요소를 정의, 변경, 삭제하는 사용됨
--	CREATE : 데이터베이스 구성 요소를 생성(테이블, 인덱스, 시퀸스, 사용자....) 
--	ALTER : 생성된 데이터베이스 구성 요소를 변경할 때 사용
--	DROP : 생성된 데이터베이스 구성 요소를 삭제할 때 사용
--	TRUNCATE : 테이블의 모든 데이터를 빠르게 삭제하고, 공간을 해제, 구조는 유지함

-- 테이블 생성
-- CREATE TABLE 테이블_이름(
--     컬럼명1 데이터타입 [PRIMARY KEY],
--     컬럼명2 데이터타입 [NULL | NOT NULL],
--     컬럼명3 데이터타입 DEFAULT 기본값,
--     컬럼명4 데이터타입,
--     ....
-- );

-- CREATE TABLE 테이블_이름(
--     컬럼명1 데이터타입,
--     컬럼명2 데이터타입 [NULL | NOT NULL],
--     컬럼명3 데이터타입 DEFAULT 기본값,
--     ....
--     CONSTRAINT 제약조건이름 PRIMARY KEY(컬럼명)
-- );

-- 데이터 타입
-- 문자열 : CHAR(2000까지 지원), VARCHAR2(4000), CLOB(128TB)
-- 숫자 : NUMBER(자리수, 소수점개수) -> 최대 38, FLOAT(128)
-- 날짜 시간 : DATE(날짜/시간), TIMESTAMP(소수점까지 저장 가능 최대 9자리)
-- https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/datatype-limits.html

-- 복습문제
-- COURSE 테이블 생성
-- 과목코드, 과목명, 학점
CREATE TABLE COURSE(
    CNO CHAR(6 BYTE),
    CNAME VARCHAR2(10 CHAR),
    CREDIT NUMBER(1)
);
DROP TABLE COURSE;
INSERT INTO COURSE VALUES('C00001','C Language',3);
INSERT INTO COURSE VALUES('C00002','프로그래밍 기초',3);
INSERT INTO COURSE VALUES('C00003','프로그래밍 응용','4');

-- 사원 테이블 생성
-- 사번, 사원명, 부서명, 월급, 입사일
CREATE TABLE EMPLOYEE(
    ENO CHAR(6),
    ENAME VARCHAR2(50),
    DNAME VARCHAR2(50),
    SALARY NUMBER(9),
    POSITION VARCHAR2(50),
    HIREDATE DATE
);
DROP TABLE EMPLOYEE;
-- 사원정보 추가
INSERT INTO EMPLOYEE
VALUES('E00001','이철수','회계부',30000.00,'21/01/01');
 
COMMIT;
------------------------------------------------------------------
-- PERSON 테이블
--  이름 -> 문자열 
--  나이 -> 숫자
CREATE TABLE PERSON(
    PNAME VARCHAR2(50),
    PAGE NUMBER(3)
);

INSERT INTO PERSON VALUES('김철수',22);
INSERT INTO PERSON VALUES('이철수',33);
INSERT INTO PERSON VALUES('박철수',24);
INSERT INTO PERSON VALUES('강철수',43);
INSERT INTO PERSON VALUES('곽철수',56);

COMMIT;

-- 테이블 삭제 --> 테이블 삭제시 모든 데이터가 날아감.
--      DROP TABLE 삭제할_테이블_명;
DROP TABLE PERSON;

-- 컬럼에 기본값 설정
CREATE TABLE PERSON(
    PNAME VARCHAR2(50),
    PAGE NUMBER(3) DEFAULT 100
);
-- 이름만 저장하는 INSERT문 실행
INSERT INTO PERSON(PNAME)
VALUES('김영수');
-- PERSON 테이블 전체 조회문 실행
SELECT PNAME, PAGE FROM PERSON;

-- 테이블에 저장된 데이터를 삭제
TRUNCATE TABLE PERSON;

-- NOT NULL
--  반드시 저장되어야 하는 항목에 적용
CREATE TABLE PERSON(
    PNAME VARCHAR2(50) NOT NULL,
    PAGE NUMBER(3) DEFAULT 100
);

INSERT INTO PERSON(PAGE) VALUES(34);

CREATE TABLE PERSON(
    PNAME VARCHAR2(50),
    PAGE NUMBER(3) DEFAULT 100 NOT NULL 
);

INSERT INTO PERSON(PNAME) VALUES('박철수');
INSERT INTO PERSON(PNAME,PAGE) VALUES('박철수',NULL);
SELECT * FROM PERSON;

DROP TABLE PERSON;
-- 날짜 기본값 설정
--  현재 날짜시간 --> SYSDATE
CREATE TABLE PERSON(
    PNAME VARCHAR2(50),
    BIRTH DATE DEFAULT SYSDATE
);

-- 이름만 삽입하는 INSERT문 생성
INSERT INTO PERSON(PNAME) VALUES('박철수');
-- 전체 조회
SELECT PNAME, TO_CHAR(BIRTH, 'DD-MM-YYYY HH24:MI:SS') FROM PERSON;

-- 학생 테이블
-- 학번, 이름, 학과명, 평점
DROP TABLE STUDENT;
CREATE TABLE STUDENT(
    SNO CHAR(8) PRIMARY KEY, -- 기본키 설정
    SNAME VARCHAR2(50) NOT NULL, -- 반드시 입력 받아야 할때
    MNAME VARCHAR2(50),
    SCORE NUMBER(3,2) DEFAULT 0.0 NOT NULL
);

CREATE TABLE NEW_STUDENT(
    SNO CHAR(8), 
    SNAME VARCHAR2(50) NOT NULL, -- 반드시 입력 받아야 할때
    MNAME VARCHAR2(50),
    SCORE NUMBER(3,2) DEFAULT 0.0 NOT NULL,
    CONSTRAINT PK_STD_SNO PRIMARY KEY(SNO)
);

SELECT * FROM USER_CONSTRAINTS;
-- 데이터 5건 추가
-- 기본키로 지정된 학번은 중복된 데이터가 들어갈수 없다. 반드시 입력되어야 함
INSERT INTO STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20203333','김철수','컴퓨터공학과',3.24);
INSERT INTO STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20204444','박철수','컴퓨터공학과',3.24);
INSERT INTO STUDENT(SNO,SNAME,MNAME) 
VALUES('20205555','이철수','컴퓨터공학과');
INSERT INTO STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20206666','박철수','컴퓨터공학과',3.24);
INSERT INTO STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES('20207777','이철수','컴퓨터공학과',3.24);
-- 학번에 NULL X
INSERT INTO STUDENT(SNO,SNAME,MNAME,SCORE) 
VALUES(NULL,'이철수','컴퓨터공학과',3.24); 
COMMIT;

SELECT * FROM STUDENT;

--학생 데이터 검색
-- 같다
SELECT * FROM STUDENT WHERE SNO = '20260049';
-- 학과명이 '물리학과'인 학생들만 조회
SELECT * FROM STUDENT WHERE MNAME = '물리학과';
-- 다르다
-- 학과명이 '물리학과'가 아닌 학생들만 조회
SELECT * FROM STUDENT WHERE MNAME != '물리학과';
SELECT * FROM STUDENT WHERE MNAME <> '물리학과';
-- > < >= <=
--평점이 3.0이상인 학생들만 조회
SELECT * FROM STUDENT WHERE SCORE >= 3.0;
--평점이 3.0미만인 학생들만 조회
SELECT * FROM STUDENT WHERE SCORE < 3.0;

-- LIKE
SELECT * FROM STUDENT WHERE SNAME LIKE '최수빈';
SELECT * FROM STUDENT WHERE SNAME LIKE '최%';
SELECT * FROM STUDENT WHERE SNAME LIKE '%연';
SELECT * FROM STUDENT WHERE SNAME LIKE '%수%';

INSERT INTO STUDENT VALUES ('2024000', '이영수', '물리학', 2.9);

-- 학번이 2024000 인데이터 조회는 SQL문 작성, LIKE 비교문, = 비교문 따로 작성
SELECT * FROM STUDENT WHERE SNO LIKE '2024000';-- 공백을 포함해서 정확하게 비교
SELECT * FROM STUDENT WHERE SNO LIKE '2024000 ';
SELECT * FROM STUDENT WHERE SNO = '2024000'; -- 불필요한 공백을 제거 후에 비교
SELECT SNO, LENGTH(SNO) FROM STUDENT WHERE SNO = '2024000';

-- AND, OR, NOT
SELECT * FROM STUDENT WHERE SCORE >= 3.0 AND SCORE <= 4.0;
SELECT * FROM STUDENT WHERE MNAME LIKE '물리학과' OR MNAME LIKE '수학과';
SELECT * FROM STUDENT WHERE NOT SCORE >= 3.0;

-- 평점이 1.0 이상, 2.0이하인 데이터만 조회
SELECT * FROM STUDENT WHERE SCORE >= 1.0 AND SCORE <= 2.0;
SELECT * FROM STUDENT WHERE SCORE BETWEEN 1.0 AND 2.0;

SELECT * FROM STUDENT;
-- 테이블 컬럼 추가
ALTER TABLE STUDENT ADD SGENDER NUMBER(1) DEFAULT 0 NOT NULL;
ALTER TABLE STUDENT ADD SGENDER NUMBER(1);
-- 테이블 컬럼 변경 
ALTER TABLE STUDENT MODIFY SGENDER CHAR(1) DEFAULT 'M';
-- 테이블 컬럼 제거
ALTER TABLE STUDENT DROP COLUMN SGENDER;
-- 테이블 컬럼 이름 변경
ALTER TABLE STUDENT RENAME COLUMN SGENDER TO S_GENDER;
-- 테이블 이름 변경
ALTER TABLE PERSON RENAME TO NEW_PERSON;
SELECT * FROM NEW_PERSON;
SELECT * FROM PERSON;

----------
DROP TABLE EMPLOYEE;
CREATE TABLE EMPLOYEE(
    ENO CHAR(6) PRIMARY KEY,
    ENAME VARCHAR2(50) NOT NULL,
    DNAME VARCHAR2(50),
    POSITION VARCHAR2(30) DEFAULT '사원',
    SALARY NUMBER(9,2) NOT NULL,
    HIREDATE DATE DEFAULT SYSDATE    
);

SELECT * FROM EMPLOYEE;

-- 1. 모든 사원 정보 조회
SELECT * FROM EMPLOYEE;
-- 2. 급여가 3,000,000 이상인 사원 조회
SELECT * FROM EMPLOYEE WHERE SALARY >= 3000000;
-- 3. 부서명이 '개발부'인 사원 조회
SELECT * FROM EMPLOYEE WHERE DNAME LIKE '개발부';
-- 4. 직급명이 '대리'인 사원 조회
SELECT * FROM EMPLOYEE WHERE POSITION LIKE '대리';
-- 5. 이름에 ‘수’가 포함된 사원 조회 (`LIKE` 사용)
SELECT * FROM EMPLOYEE WHERE ENAME LIKE '%수%';
-- 6. 급여가 3,000,000 이상 5,000,000 이하인 사원 조회 (`BETWEEN` 사용)
SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 3000000 AND 5000000;  
-- 7. 입사일이 오늘 날짜인 사원만 조회 (`SYSDATE` 활용)
SELECT * FROM EMPLOYEE WHERE HIREDATE = SYSDATE;
-- 사원이름이 '김'으로 시작하는 사원을 조회하세요.
SELECT * FROM EMPLOYEE WHERE ENAME LIKE '김%';
-- 부서명이 '개발부' 또는 '기획부'인 사원을 조회하세요.
SELECT * FROM EMPLOYEE WHERE DNAME LIKE '개발부' OR DNAME LIKE '기획부';
SELECT * FROM EMPLOYEE WHERE DNAME IN('개발부','기획부');
-- 직급이 '사원'이 아닌 사원만 조회하세요.
SELECT * FROM EMPLOYEE WHERE NOT POSITION LIKE '사원';
-- 급여가 4,000,000보다 적은 사원을 조회하세요.
SELECT * FROM EMPLOYEE WHERE SALARY < 4000000;
-- 부서명이 '영업부'가 아닌 사원만 조회하세요.
SELECT * FROM EMPLOYEE WHERE NOT DNAME LIKE '영업부';




